actions:
- name: Wait for all pods
  bashTest:
    script: |-
      TIMEOUT=360
      INTERVAL=5
      PERIOD=0
      while [[ "$(kubectl get pxc/${APP_INSTANCE_NAME} -o jsonpath='{.status.pxc.ready}')" -ne "$(kubectl get pxc/${APP_INSTANCE_NAME} -o jsonpath='{.spec.pxc.size}')" ]] \
            || [[ "$(kubectl get pxc/${APP_INSTANCE_NAME} -o jsonpath='{.status.haproxy.ready}')" -ne "$(kubectl get pxc/${APP_INSTANCE_NAME} -o jsonpath='{.spec.haproxy.size}')" ]] \
            || [[ "$(kubectl get pxc/${APP_INSTANCE_NAME} -o jsonpath='{.status.state}')" -ne "ready" ]]; do
          sleep ${INTERVAL}
          ((PERIOD+=INTERVAL))
          if [[ "${PERIOD}" -ge "${TIMEOUT}" ]]; then
              exit 1
          fi
      done
    expect:
      exitCode:
        equals: 0
- name: Can connect to a database
  bashTest:
    script: |-
      mysql -h ${APP_INSTANCE_NAME}-haproxy.${NAMESPACE}.svc.cluster.local -u root -p"${MYSQL_PASSWORD}" -e "SHOW DATABASES"
    expect:
      stdout:
        contains: "information_schema"
      exitCode:
        equals: 0
- name: Can not connect to a database with incorrect credentials
  bashTest:
    script: mysql -h ${APP_INSTANCE_NAME}-haproxy.${NAMESPACE}.svc.cluster.local -u root -p"wrong_pass" -e "SHOW DATABASES"
    expect:
      stderr:
        matches: 'ERROR 1045 (28000): Access denied for user ''root''@''.+'' (using password: YES)'
      exitCode:
        equals: 1
- name: Can create database
  bashTest:
    script: mysql -h ${APP_INSTANCE_NAME}-haproxy.${NAMESPACE}.svc.cluster.local -u root -p"${MYSQL_PASSWORD}" -e "CREATE DATABASE IF NOT EXISTS test_database"
    expect:
      exitCode:
        equals: 0
- name: Check replication
  bashTest:
    script: mysql -h ${APP_INSTANCE_NAME}-pxc-1.${APP_INSTANCE_NAME}-pxc.${NAMESPACE}.svc.cluster.local -u root -p"${MYSQL_PASSWORD}" -e "SHOW DATABASES"
    expect:
      stdout:
        contains: test_database
      exitCode:
        equals: 0
- name: Wait for cluster removal
  bashTest:
    script: |-
      TIMEOUT=120
      INTERVAL=5
      PERIOD=0
      kubectl delete pxc/${APP_INSTANCE_NAME}
      while [[ -n "$(kubectl get pxc/${APP_INSTANCE_NAME} 2>/dev/null || true)" ]]; do
          sleep ${INTERVAL}
          ((PERIOD+=INTERVAL))
          if [[ "${PERIOD}" -ge "${TIMEOUT}" ]]; then
              exit 1
          fi
      done
    expect:
      exitCode:
        equals: 0
